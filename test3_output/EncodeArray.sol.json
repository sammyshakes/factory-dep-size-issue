{
  "language": "Solidity",
  "sources": {
    "src/CoreModule/EncodeArray.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\n/* Autogenerated file. Do not edit manually. */\nimport { TightCoder } from \"./TightCoder.sol\";\n\nlibrary EncodeArray {\n  function encode(uint8[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 1, 248);\n  }\n\n  function encode(uint16[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 2, 240);\n  }\n\n  function encode(uint24[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 3, 232);\n  }\n\n  function encode(uint32[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 4, 224);\n  }\n\n  function encode(uint40[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 5, 216);\n  }\n\n  function encode(uint48[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 6, 208);\n  }\n\n  function encode(uint56[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 7, 200);\n  }\n\n  function encode(uint64[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 8, 192);\n  }\n\n  function encode(uint72[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 9, 184);\n  }\n\n  function encode(uint80[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 10, 176);\n  }\n\n  function encode(uint88[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 11, 168);\n  }\n\n  function encode(uint96[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 12, 160);\n  }\n\n  function encode(uint104[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 13, 152);\n  }\n\n  function encode(uint112[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 14, 144);\n  }\n\n  function encode(uint120[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 15, 136);\n  }\n\n  function encode(uint128[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 16, 128);\n  }\n\n  function encode(uint136[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 17, 120);\n  }\n\n  function encode(uint144[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 18, 112);\n  }\n\n  function encode(uint152[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 19, 104);\n  }\n\n  function encode(uint160[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 20, 96);\n  }\n\n  function encode(uint168[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 21, 88);\n  }\n\n  function encode(uint176[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 22, 80);\n  }\n\n  function encode(uint184[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 23, 72);\n  }\n\n  function encode(uint192[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 24, 64);\n  }\n\n  function encode(uint200[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 25, 56);\n  }\n\n  function encode(uint208[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 26, 48);\n  }\n\n  function encode(uint216[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 27, 40);\n  }\n\n  function encode(uint224[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 28, 32);\n  }\n\n  function encode(uint232[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 29, 24);\n  }\n\n  function encode(uint240[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 30, 16);\n  }\n\n  function encode(uint248[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 31, 8);\n  }\n\n  function encode(uint256[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 32, 0);\n  }\n\n  function encode(int8[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 1, 248);\n  }\n\n  function encode(int16[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 2, 240);\n  }\n\n  function encode(int24[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 3, 232);\n  }\n\n  function encode(int32[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 4, 224);\n  }\n\n  function encode(int40[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 5, 216);\n  }\n\n  function encode(int48[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 6, 208);\n  }\n\n  function encode(int56[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 7, 200);\n  }\n\n  function encode(int64[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 8, 192);\n  }\n\n  function encode(int72[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 9, 184);\n  }\n\n  function encode(int80[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 10, 176);\n  }\n\n  function encode(int88[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 11, 168);\n  }\n\n  function encode(int96[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 12, 160);\n  }\n\n  function encode(int104[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 13, 152);\n  }\n\n  function encode(int112[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 14, 144);\n  }\n\n  function encode(int120[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 15, 136);\n  }\n\n  function encode(int128[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 16, 128);\n  }\n\n  function encode(int136[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 17, 120);\n  }\n\n  function encode(int144[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 18, 112);\n  }\n\n  function encode(int152[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 19, 104);\n  }\n\n  function encode(int160[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 20, 96);\n  }\n\n  function encode(int168[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 21, 88);\n  }\n\n  function encode(int176[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 22, 80);\n  }\n\n  function encode(int184[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 23, 72);\n  }\n\n  function encode(int192[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 24, 64);\n  }\n\n  function encode(int200[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 25, 56);\n  }\n\n  function encode(int208[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 26, 48);\n  }\n\n  function encode(int216[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 27, 40);\n  }\n\n  function encode(int224[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 28, 32);\n  }\n\n  function encode(int232[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 29, 24);\n  }\n\n  function encode(int240[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 30, 16);\n  }\n\n  function encode(int248[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 31, 8);\n  }\n\n  function encode(int256[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 32, 0);\n  }\n\n  function encode(bytes1[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 1, 0);\n  }\n\n  function encode(bytes2[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 2, 0);\n  }\n\n  function encode(bytes3[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 3, 0);\n  }\n\n  function encode(bytes4[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 4, 0);\n  }\n\n  function encode(bytes5[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 5, 0);\n  }\n\n  function encode(bytes6[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 6, 0);\n  }\n\n  function encode(bytes7[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 7, 0);\n  }\n\n  function encode(bytes8[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 8, 0);\n  }\n\n  function encode(bytes9[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 9, 0);\n  }\n\n  function encode(bytes10[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 10, 0);\n  }\n\n  function encode(bytes11[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 11, 0);\n  }\n\n  function encode(bytes12[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 12, 0);\n  }\n\n  function encode(bytes13[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 13, 0);\n  }\n\n  function encode(bytes14[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 14, 0);\n  }\n\n  function encode(bytes15[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 15, 0);\n  }\n\n  function encode(bytes16[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 16, 0);\n  }\n\n  function encode(bytes17[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 17, 0);\n  }\n\n  function encode(bytes18[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 18, 0);\n  }\n\n  function encode(bytes19[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 19, 0);\n  }\n\n  function encode(bytes20[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 20, 0);\n  }\n\n  function encode(bytes21[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 21, 0);\n  }\n\n  function encode(bytes22[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 22, 0);\n  }\n\n  function encode(bytes23[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 23, 0);\n  }\n\n  function encode(bytes24[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 24, 0);\n  }\n\n  function encode(bytes25[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 25, 0);\n  }\n\n  function encode(bytes26[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 26, 0);\n  }\n\n  function encode(bytes27[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 27, 0);\n  }\n\n  function encode(bytes28[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 28, 0);\n  }\n\n  function encode(bytes29[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 29, 0);\n  }\n\n  function encode(bytes30[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 30, 0);\n  }\n\n  function encode(bytes31[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 31, 0);\n  }\n\n  function encode(bytes32[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 32, 0);\n  }\n\n  function encode(bool[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 1, 248);\n  }\n\n  function encode(address[] memory _input) internal pure returns (bytes memory) {\n    bytes32[] memory _genericArray;\n    assembly {\n      _genericArray := _input\n    }\n    return TightCoder.encode(_genericArray, 20, 96);\n  }\n}\n"
    },
    "src/CoreModule/TightCoder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\nimport { Slice, SliceLib } from \"./Slice.sol\";\n\n/**\n * Low-level generic implementation of tight encoding for arrays, used by codegen.\n * This is the same as solidity's internal tight encoding for array data in storage.\n */\nlibrary TightCoder {\n  /**\n   * Copies the array to a new bytes array, tightly packing it.\n   * elementSize is in bytes, leftPaddingBits is in bits.\n   * elementSize and leftPaddingBits must be correctly provided by the caller based on the array's element type.\n   * @return data a tightly packed array\n   */\n  function encode(\n    bytes32[] memory array,\n    uint256 elementSize,\n    uint256 leftPaddingBits\n  ) internal pure returns (bytes memory data) {\n    uint256 arrayLength = array.length;\n    uint256 packedLength = array.length * elementSize;\n\n    // Manual memory allocation is cheaper and removes the issue of memory corruption at the tail\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Solidity's YulUtilFunctions::roundUpFunction\n      function round_up_to_mul_of_32(value) -> _result {\n        _result := and(add(value, 31), not(31))\n      }\n\n      // Allocate memory\n      data := mload(0x40)\n      let packedPointer := add(data, 0x20)\n      mstore(0x40, round_up_to_mul_of_32(add(packedPointer, packedLength)))\n      // Store length\n      mstore(data, packedLength)\n\n      for {\n        let i := 0\n        // Skip array length\n        let arrayPointer := add(array, 0x20)\n      } lt(i, arrayLength) {\n        // Loop until we reach the end of the array\n        i := add(i, 1)\n        // Increment array pointer by one word\n        arrayPointer := add(arrayPointer, 0x20)\n        // Increment packed pointer by one element size\n        packedPointer := add(packedPointer, elementSize)\n      } {\n        // Pack one array element\n        mstore(packedPointer, shl(leftPaddingBits, mload(arrayPointer)))\n      }\n    }\n  }\n\n  /**\n   * Unpacks the slice to a new memory location and lays it out like a memory array.\n   * elementSize is in bytes, leftPaddingBits is in bits.\n   * elementSize and leftPaddingBits must be correctly provided by the caller based on the array's element type.\n   * @return array a generic array, needs to be casted to the expected type using assembly\n   */\n  function decode(\n    Slice packedSlice,\n    uint256 elementSize,\n    uint256 leftPaddingBits\n  ) internal pure returns (bytes32[] memory array) {\n    uint256 packedPointer = packedSlice.pointer();\n    uint256 packedLength = packedSlice.length();\n    // Array length (number of elements)\n    uint256 arrayLength;\n    unchecked {\n      arrayLength = packedLength / elementSize;\n    }\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      // Allocate memory\n      array := mload(0x40)\n      let arrayPointer := add(array, 0x20)\n      mstore(0x40, add(arrayPointer, mul(arrayLength, 32)))\n      // Store length\n      mstore(array, arrayLength)\n\n      for {\n        let i := 0\n      } lt(i, arrayLength) {\n        // Loop until we reach the end of the array\n        i := add(i, 1)\n        // Increment array pointer by one word\n        arrayPointer := add(arrayPointer, 0x20)\n        // Increment packed pointer by one element size\n        packedPointer := add(packedPointer, elementSize)\n      } {\n        // Unpack one array element\n        mstore(arrayPointer, shr(leftPaddingBits, mload(packedPointer)))\n      }\n    }\n  }\n}\n"
    },
    "src/CoreModule/Slice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\nimport { Memory } from \"./Memory.sol\";\nimport { DecodeSlice } from \"./DecodeSlice.sol\";\n\n// Acknowledgements:\n// Based on @dk1a's Slice.sol library (https://github.com/dk1a/solidity-stringutils/blob/main/src/Slice.sol)\n\n// First 16 bytes are the pointer to the data, followed by 16 bytes of data length.\ntype Slice is uint256;\n\nusing SliceInstance for Slice global;\nusing DecodeSlice for Slice global;\n\n/**\n * @title Static functions for Slice\n */\nlibrary SliceLib {\n  error Slice_OutOfBounds(bytes data, uint256 start, uint256 end);\n\n  uint256 constant MASK_LEN = uint256(type(uint128).max);\n  uint256 constant MASK_PTR = uint256(type(uint128).max) << 128;\n\n  /**\n   * @dev Converts a bytes array to a slice (without copying data)\n   */\n  function fromBytes(bytes memory data) internal pure returns (Slice) {\n    uint256 _pointer;\n    assembly {\n      _pointer := add(data, 0x20) // pointer to first data byte\n    }\n\n    // Pointer is stored in upper 128 bits, length is stored in lower 128 bits\n    return Slice.wrap((_pointer << 128) | (data.length & MASK_LEN));\n  }\n\n  /**\n   * @dev Subslice a bytes array using the given start index until the end of the array (without copying data)\n   */\n  function getSubslice(bytes memory data, uint256 start) internal pure returns (Slice) {\n    return getSubslice(data, start, data.length);\n  }\n\n  /**\n   * @dev Subslice a bytes array using the given indexes (without copying data)\n   * The start index is inclusive, the end index is exclusive\n   */\n  function getSubslice(bytes memory data, uint256 start, uint256 end) internal pure returns (Slice) {\n    // TODO this check helps catch bugs and can eventually be removed\n    if (!(start <= end && end <= data.length)) revert Slice_OutOfBounds(data, start, end);\n\n    uint256 _pointer;\n    assembly {\n      _pointer := add(data, 0x20) // pointer to first data byte\n    }\n\n    _pointer += start;\n    uint256 _len = end - start;\n\n    // Pointer is stored in upper 128 bits, length is stored in lower 128 bits\n    return Slice.wrap((_pointer << 128) | (_len & MASK_LEN));\n  }\n}\n\n/**\n * @title Instance functions for Slice\n */\nlibrary SliceInstance {\n  /**\n   * @dev Returns the pointer to the start of a slice\n   */\n  function pointer(Slice self) internal pure returns (uint256) {\n    return Slice.unwrap(self) >> 128;\n  }\n\n  /**\n   * @dev Returns the slice length in bytes\n   */\n  function length(Slice self) internal pure returns (uint256) {\n    return Slice.unwrap(self) & SliceLib.MASK_LEN;\n  }\n\n  /**\n   * @dev Copies the slice to a new bytes array\n   * The slice will NOT point to the new bytes array\n   */\n  function toBytes(Slice self) internal pure returns (bytes memory data) {\n    uint256 fromPointer = pointer(self);\n    uint256 _length = length(self);\n\n    // Allocate a new bytes array and get the pointer to it\n    data = new bytes(_length);\n    uint256 toPointer;\n    assembly {\n      toPointer := add(data, 32)\n    }\n    // Copy the slice contents to the array\n    Memory.copy(fromPointer, toPointer, _length);\n  }\n\n  function toBytes32(Slice self) internal pure returns (bytes32 result) {\n    uint256 memoryPointer = self.pointer();\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := mload(memoryPointer)\n    }\n    return result;\n  }\n}\n"
    },
    "src/CoreModule/Memory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\nimport { leftMask } from \"./leftMask.sol\";\n\nlibrary Memory {\n  /**\n   * In dynamic arrays the first word stores the length of data, after which comes the data.\n   * Example: 0x40 0x01 0x02\n   *          ^len ^data\n   */\n  function dataPointer(bytes memory data) internal pure returns (uint256 memoryPointer) {\n    assembly {\n      memoryPointer := add(data, 0x20)\n    }\n  }\n\n  function copy(uint256 fromPointer, uint256 toPointer, uint256 length) internal pure {\n    // Copy 32-byte chunks\n    while (length >= 32) {\n      /// @solidity memory-safe-assembly\n      assembly {\n        mstore(toPointer, mload(fromPointer))\n      }\n      // Safe because total addition will be <= length (ptr+len is implicitly safe)\n      unchecked {\n        toPointer += 32;\n        fromPointer += 32;\n        length -= 32;\n      }\n    }\n    if (length == 0) return;\n\n    // Copy the 0-31 length tail\n    uint256 mask = leftMask(length);\n    /// @solidity memory-safe-assembly\n    assembly {\n      mstore(\n        toPointer,\n        or(\n          // store the left part\n          and(mload(fromPointer), mask),\n          // preserve the right part\n          and(mload(toPointer), not(mask))\n        )\n      )\n    }\n  }\n}\n"
    },
    "src/CoreModule/DecodeSlice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\n/* Autogenerated file. Do not edit manually. */\nimport { TightCoder } from \"./TightCoder.sol\";\nimport { Slice } from \"./Slice.sol\";\n\nlibrary DecodeSlice {\n  function decodeArray_uint8(Slice _input) internal pure returns (uint8[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint16(Slice _input) internal pure returns (uint16[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 240);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint24(Slice _input) internal pure returns (uint24[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 232);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint32(Slice _input) internal pure returns (uint32[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 224);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint40(Slice _input) internal pure returns (uint40[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 216);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint48(Slice _input) internal pure returns (uint48[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 208);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint56(Slice _input) internal pure returns (uint56[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 200);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint64(Slice _input) internal pure returns (uint64[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 192);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint72(Slice _input) internal pure returns (uint72[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 184);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint80(Slice _input) internal pure returns (uint80[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 176);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint88(Slice _input) internal pure returns (uint88[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 168);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint96(Slice _input) internal pure returns (uint96[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 160);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint104(Slice _input) internal pure returns (uint104[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 152);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint112(Slice _input) internal pure returns (uint112[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 144);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint120(Slice _input) internal pure returns (uint120[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 136);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint128(Slice _input) internal pure returns (uint128[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 128);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint136(Slice _input) internal pure returns (uint136[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 120);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint144(Slice _input) internal pure returns (uint144[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 112);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint152(Slice _input) internal pure returns (uint152[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 104);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint160(Slice _input) internal pure returns (uint160[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint168(Slice _input) internal pure returns (uint168[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 88);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint176(Slice _input) internal pure returns (uint176[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 80);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint184(Slice _input) internal pure returns (uint184[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 72);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint192(Slice _input) internal pure returns (uint192[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 64);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint200(Slice _input) internal pure returns (uint200[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 56);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint208(Slice _input) internal pure returns (uint208[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 48);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint216(Slice _input) internal pure returns (uint216[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 40);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint224(Slice _input) internal pure returns (uint224[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 32);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint232(Slice _input) internal pure returns (uint232[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 24);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint240(Slice _input) internal pure returns (uint240[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 16);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint248(Slice _input) internal pure returns (uint248[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 8);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_uint256(Slice _input) internal pure returns (uint256[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int8(Slice _input) internal pure returns (int8[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int16(Slice _input) internal pure returns (int16[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 240);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int24(Slice _input) internal pure returns (int24[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 232);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int32(Slice _input) internal pure returns (int32[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 224);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int40(Slice _input) internal pure returns (int40[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 216);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int48(Slice _input) internal pure returns (int48[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 208);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int56(Slice _input) internal pure returns (int56[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 200);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int64(Slice _input) internal pure returns (int64[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 192);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int72(Slice _input) internal pure returns (int72[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 184);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int80(Slice _input) internal pure returns (int80[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 176);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int88(Slice _input) internal pure returns (int88[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 168);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int96(Slice _input) internal pure returns (int96[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 160);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int104(Slice _input) internal pure returns (int104[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 152);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int112(Slice _input) internal pure returns (int112[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 144);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int120(Slice _input) internal pure returns (int120[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 136);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int128(Slice _input) internal pure returns (int128[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 128);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int136(Slice _input) internal pure returns (int136[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 120);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int144(Slice _input) internal pure returns (int144[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 112);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int152(Slice _input) internal pure returns (int152[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 104);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int160(Slice _input) internal pure returns (int160[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int168(Slice _input) internal pure returns (int168[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 88);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int176(Slice _input) internal pure returns (int176[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 80);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int184(Slice _input) internal pure returns (int184[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 72);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int192(Slice _input) internal pure returns (int192[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 64);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int200(Slice _input) internal pure returns (int200[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 56);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int208(Slice _input) internal pure returns (int208[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 48);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int216(Slice _input) internal pure returns (int216[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 40);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int224(Slice _input) internal pure returns (int224[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 32);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int232(Slice _input) internal pure returns (int232[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 24);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int240(Slice _input) internal pure returns (int240[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 16);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int248(Slice _input) internal pure returns (int248[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 8);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_int256(Slice _input) internal pure returns (int256[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes1(Slice _input) internal pure returns (bytes1[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes2(Slice _input) internal pure returns (bytes2[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 2, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes3(Slice _input) internal pure returns (bytes3[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 3, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes4(Slice _input) internal pure returns (bytes4[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 4, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes5(Slice _input) internal pure returns (bytes5[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 5, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes6(Slice _input) internal pure returns (bytes6[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 6, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes7(Slice _input) internal pure returns (bytes7[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 7, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes8(Slice _input) internal pure returns (bytes8[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 8, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes9(Slice _input) internal pure returns (bytes9[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 9, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes10(Slice _input) internal pure returns (bytes10[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 10, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes11(Slice _input) internal pure returns (bytes11[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 11, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes12(Slice _input) internal pure returns (bytes12[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 12, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes13(Slice _input) internal pure returns (bytes13[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 13, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes14(Slice _input) internal pure returns (bytes14[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 14, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes15(Slice _input) internal pure returns (bytes15[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 15, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes16(Slice _input) internal pure returns (bytes16[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 16, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes17(Slice _input) internal pure returns (bytes17[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 17, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes18(Slice _input) internal pure returns (bytes18[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 18, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes19(Slice _input) internal pure returns (bytes19[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 19, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes20(Slice _input) internal pure returns (bytes20[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes21(Slice _input) internal pure returns (bytes21[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 21, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes22(Slice _input) internal pure returns (bytes22[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 22, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes23(Slice _input) internal pure returns (bytes23[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 23, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes24(Slice _input) internal pure returns (bytes24[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 24, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes25(Slice _input) internal pure returns (bytes25[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 25, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes26(Slice _input) internal pure returns (bytes26[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 26, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes27(Slice _input) internal pure returns (bytes27[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 27, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes28(Slice _input) internal pure returns (bytes28[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 28, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes29(Slice _input) internal pure returns (bytes29[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 29, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes30(Slice _input) internal pure returns (bytes30[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 30, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes31(Slice _input) internal pure returns (bytes31[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 31, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bytes32(Slice _input) internal pure returns (bytes32[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 32, 0);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_bool(Slice _input) internal pure returns (bool[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 1, 248);\n    assembly {\n      _output := _genericArray\n    }\n  }\n\n  function decodeArray_address(Slice _input) internal pure returns (address[] memory _output) {\n    bytes32[] memory _genericArray = TightCoder.decode(_input, 20, 96);\n    assembly {\n      _output := _genericArray\n    }\n  }\n}\n"
    },
    "src/CoreModule/leftMask.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\n/**\n * Adapted from https://github.com/dk1a/solidity-stringutils/blob/main/src/utils/mem.sol#L149-L167\n * @dev Left-aligned byte mask (e.g. for partial mload/mstore).\n * For byteLength >= 32 returns type(uint256).max\n *\n * length 0:   0x000000...000000\n * length 1:   0xff0000...000000\n * length 2:   0xffff00...000000\n * ...\n * length 30:  0xffffff...ff0000\n * length 31:  0xffffff...ffff00\n * length 32+: 0xffffff...ffffff\n */\nfunction leftMask(uint256 byteLength) pure returns (uint256) {\n  unchecked {\n    return ~(type(uint256).max >> (byteLength * 8));\n  }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}