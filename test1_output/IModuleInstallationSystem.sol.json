{
  "language": "Solidity",
  "sources": {
    "src/CoreModule/IModuleInstallationSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\n/* Autogenerated file. Do not edit manually. */\n\nimport { IModule } from \"./IModule.sol\";\n\ninterface IModuleInstallationSystem {\n  function installModule(IModule module, bytes memory args) external;\n}\n"
    },
    "src/CoreModule/IModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\nimport { IERC165, ERC165_INTERFACE_ID } from \"./IERC165.sol\";\n\n/**\n * @dev Calculation for ERC-165 interface ID for the IModule functions.\n * Combines the selector for each function with the ERC165_INTERFACE_ID.\n * See: https://eips.ethereum.org/EIPS/eip-165\n */\nbytes4 constant MODULE_INTERFACE_ID = IModule.getName.selector ^\n  IModule.installRoot.selector ^\n  IModule.install.selector ^\n  ERC165_INTERFACE_ID;\n\n/**\n * @title IModule\n * @dev Interface for the Module system.\n * A module can be installed within the context of a world, either as a root or non-root module.\n * This interface adheres to the ERC-165 standard for determining interface support.\n */\ninterface IModule is IERC165 {\n  /// @dev Errors to represent non-support of specific installation types.\n  error Module_RootInstallNotSupported();\n  error Module_NonRootInstallNotSupported();\n\n  /**\n   * @notice Return the name of the module.\n   * @dev Provides a way to identify the module by a unique name.\n   * @return name The name of the module as a bytes16.\n   */\n  function getName() external view returns (bytes16 name);\n\n  /**\n   * @notice Installs the module as a root module.\n   * @dev This function is invoked by the World contract during `installRootModule` process.\n   * The module expects to be called via the World contract and thus installs itself on the `msg.sender`.\n   * @param args Arguments that may be needed during the installation process.\n   */\n  function installRoot(bytes memory args) external;\n\n  /**\n   * @notice Installs the module.\n   * @dev This function is invoked by the World contract during `installModule` process.\n   * The module expects to be called via the World contract and thus installs itself on the `msg.sender`.\n   * Logic might differ from `installRoot`, for example, this might accept namespace parameters.\n   * @param args Arguments that may be needed during the installation process.\n   */\n  function install(bytes memory args) external;\n}\n"
    },
    "src/CoreModule/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.21;\n\n/**\n * @dev Calculation for ERC-165 interface ID for the `supportsInterface` function.\n */\nbytes4 constant ERC165_INTERFACE_ID = IERC165.supportsInterface.selector;\n\n/**\n * @title IERC165\n * @dev Interface for the ERC-165 standard as described in the EIP-165.\n * Allows for contracts to be checked for their support of an interface.\n * See: https://eips.ethereum.org/EIPS/eip-165\n */\ninterface IERC165 {\n  /**\n   * @notice Query if a contract implements an interface.\n   * @dev Interface identification is specified in ERC-165.\n   * This function uses less than 30,000 gas.\n   * @param interfaceID The interface identifier, as specified in ERC-165.\n   * @return True if the contract implements `interfaceID` and\n   * `interfaceID` is not 0xffffffff, false otherwise.\n   */\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}